<?xml version="1.0" encoding="UTF-8"?>
<robot generated="20160105 13:37:33.973" generator="Robot 3.0 (Python 2.7.6 on linux2)">
<suite source="/home/jkohvakk/Documents/popt/test/source_of_test_xml.robot" id="s1" name="Source Of Test Xml">
<kw type="setup" name="Suite setup">
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>We are doing some strange setup actions here!</arg>
</arguments>
<msg timestamp="20160105 13:37:34.030" level="INFO">We are doing some strange setup actions here!</msg>
<status status="PASS" endtime="20160105 13:37:34.030" starttime="20160105 13:37:34.030"></status>
</kw>
<status status="PASS" endtime="20160105 13:37:34.030" starttime="20160105 13:37:34.030"></status>
</kw>
<test id="s1-t1" name="Test 1">
<kw name="Write a long log">
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${VERY LONG TEXT}</arg>
</arguments>
<msg timestamp="20160105 13:37:34.031" level="INFO">The Zen of Python, by Tim Peters

Beautiful is better than ugly.
Explicit is better than implicit.
Simple is better than complex.
Complex is better than complicated.
Flat is better than nested.
Sparse is better than dense.
Readability counts.
Special cases aren't special enough to break the rules.
Although practicality beats purity.
Errors should never pass silently.
Unless explicitly silenced.
In the face of ambiguity, refuse the temptation to guess.
There should be one-- and preferably only one --obvious way to do it.
Although that way may not be obvious at first unless you're Dutch.
Now is better than never.
Although never is often better than *right* now.
If the implementation is hard to explain, it's a bad idea.
If the implementation is easy to explain, it may be a good idea.
Namespaces are one honking great idea -- let's do more of those!
</msg>
<status status="PASS" endtime="20160105 13:37:34.031" starttime="20160105 13:37:34.031"></status>
</kw>
<status status="PASS" endtime="20160105 13:37:34.032" starttime="20160105 13:37:34.031"></status>
</kw>
<kw name="Test 1 keyword 2">
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Test 1 keyword 2</arg>
</arguments>
<msg timestamp="20160105 13:37:34.032" level="INFO">Test 1 keyword 2</msg>
<status status="PASS" endtime="20160105 13:37:34.032" starttime="20160105 13:37:34.032"></status>
</kw>
<kw name="Test 1 inner keyword">
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Test 1 inner keyword</arg>
</arguments>
<msg timestamp="20160105 13:37:34.032" level="INFO">Test 1 inner keyword</msg>
<status status="PASS" endtime="20160105 13:37:34.033" starttime="20160105 13:37:34.032"></status>
</kw>
<status status="PASS" endtime="20160105 13:37:34.033" starttime="20160105 13:37:34.032"></status>
</kw>
<status status="PASS" endtime="20160105 13:37:34.033" starttime="20160105 13:37:34.032"></status>
</kw>
<doc>This is an important documentation for test 1</doc>
<tags>
<tag>Feature1</tag>
<tag>Feature2</tag>
</tags>
<status status="PASS" endtime="20160105 13:37:34.033" critical="yes" starttime="20160105 13:37:34.031"></status>
</test>
<test id="s1-t2" name="Test 2">
<kw name="Test 2 keyword 1">
<doc>Arguments are really ignored. I do not know why :-).</doc>
<arguments>
<arg>foo</arg>
<arg>bar</arg>
<arg>dii</arg>
<arg>daa</arg>
</arguments>
<assign>
<var>${foo}</var>
</assign>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Test 2 keyword 1</arg>
</arguments>
<msg timestamp="20160105 13:37:34.034" level="INFO">Test 2 keyword 1</msg>
<status status="PASS" endtime="20160105 13:37:34.034" starttime="20160105 13:37:34.034"></status>
</kw>
<msg timestamp="20160105 13:37:34.034" level="INFO">${foo} = foo</msg>
<status status="PASS" endtime="20160105 13:37:34.034" starttime="20160105 13:37:34.033"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${foo}</arg>
<arg>bar</arg>
</arguments>
<msg timestamp="20160105 13:37:34.034" level="FAIL">foo != bar</msg>
<status status="FAIL" endtime="20160105 13:37:34.034" starttime="20160105 13:37:34.034"></status>
</kw>
<status status="FAIL" endtime="20160105 13:37:34.035" critical="yes" starttime="20160105 13:37:34.033">foo != bar</status>
</test>
<doc>It was really hard to figure out a good
way to test pop. Currently, this file
is used for generating a golden output.xml.
Strategy might change in the future.
Usage of output of Robot's own acceptance tests
has been suggested. Also, it has been suggested to
consider using a ResultVisitor from robot.api
instead of directly parsing the output.xml</doc>
<metadata>
<item name="Version">0.1</item>
</metadata>
<status status="FAIL" endtime="20160105 13:37:34.035" starttime="20160105 13:37:33.974"></status>
</suite>
<statistics>
<total>
<stat fail="1" pass="1">Critical Tests</stat>
<stat fail="1" pass="1">All Tests</stat>
</total>
<tag>
<stat fail="0" pass="1">Feature1</stat>
<stat fail="0" pass="1">Feature2</stat>
</tag>
<suite>
<stat fail="1" id="s1" name="Source Of Test Xml" pass="1">Source Of Test Xml</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
